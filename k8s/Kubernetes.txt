built by Google
open source
most popular container orchestration technology

basicalyy same as docker swarm
has master and worker(minion) nodes

difference - it does not run containers directly on worker nodes,
instead creates Pods, and runs each continaer inside a pod

Pod is the smallest & simplest unit we can create in kubernetes

A pod is a unit of deployment

Pods support complex application architectures, with many containers in it
usually containers of different type are packed together in a pod
packed together containers in a dob usually depend on each other

it helps to scale the application, deploying multiple instances of the pod

all containers in the same pod share the same network and can communicate with eachother
they also share the same storage volume, to access the same shared data

they share the same cycle, powered up together and destroyed together

replica-sets ensure we have the specified level of redundancy

in docker swarm we have ingres network to enable access to the services
in kubernetes we have services
we can have multiple services in kubernetes, internal(ClusterIP) and external(LoadBalancer)


KUBECTL
-----------
a cmd line interface to create configurations, get current status, or get detailed information
about the services

kubectl create -f pod-definition.yml
kubectl get nodes
kubectl get pods
kubectl get services
kubectl describe pods
kubectl delete -f .
kubectl delete -f pod-definition.yml

pod-definition.yml
-------------------
Version:
    version of schema we are using
kind:
    the kind of resource we are definiing in the yml file, e.g, Pod, Deployment, Service
Metadata:
    additional information such as Name, Labels
Specification:
    actual deployment definitions such as containers, ports, etc.

voting-app-pod.yml
--------------------------
apiVersion: v1
kind: Pod
metadata:
    name: voting-app-pod
    labels:
        name: voting-app-pod
        app: demo-voting-app
spec:
    containers:
    - name: voting-app
      image: dockersamples/examplevotingapp_vote
      ports:
      - containerPort: 80

worker-app-pod.yml
--------------------------
apiVersion: v1
kind: Pod
metadata:
    name: worker-app-pod
    labels:
        name: worker-app-pod
        app: demo-voting-app
spec:
    containers:
    - name: worker-app
      image: dockersamples/examplevotingapp_worker

result-app-pod.yml
--------------------------
apiVersion: v1
kind: Pod
metadata:
    name: result-app-pod
    labels:
        name: result-app-pod
        app: demo-voting-app
spec:
    containers:
    - name: result-app
      image: dockersamples/examplevotingapp_result
      ports:
      - containerPort: 80

redis-pod.yml
--------------------------
apiVersion: v1
kind: Pod
metadata:
    name: redis-pod
    labels:
        name: redis-pod
        app: demo-voting-app
spec:
    containers:
    - name: redis
      image: redis
      ports:
      - containerPort: 6379

postgres-pod.yml
--------------------------
apiVersion: v1
kind: Pod
metadata:
    name: postgres-pod
    labels:
        name: postgres-pod
        app: demo-voting-app
spec:
    containers:
    - name: postgres
      image: postgres:9.4
      ports:
      - containerPort: 5432

redis-service.yml
--------------------------
apiVersion: v1
kind: Service
metadata:
    name: redis
    labels:
        name: redis-service
        app: demo-voting-app
spec:
    ports:
    - port: 6379
      target: 6379
    selector:
        name: redis-pod
        app: demo-voting-app

postgres-service.yml
--------------------------
apiVersion: v1
kind: Service
metadata:
    name: db
    labels:
        name: db-service
        app: demo-voting-app
spec:
    ports:
    - port: 5432
      target: 5432
    selector:
        name: postgres-pod
        app: demo-voting-app

voting-app-service.yml
--------------------------
apiVersion: v1
kind: Service
metadata:
    name: voting-service
    labels:
        name: voting-service
        app: demo-voting-app
spec:
    type: LoadBalancer
    ports:
    - port: 80
      target: 80
    selector:
        name: voting-app-pod
        app: demo-voting-app

result-app-service.yml
--------------------------
apiVersion: v1
kind: Service
metadata:
    name: result-service
    labels:
        name: result-service
        app: demo-voting-app
spec:
    type: LoadBalancer
    ports:
    - port: 80
      target: 80
    selector:
        name: result-app-pod
        app: demo-voting-app
